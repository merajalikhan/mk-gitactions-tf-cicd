name: 'Build Databricks Deployment Workflow'

on:
  #push:
   # branches: [ "main" ]
  pull_request:
     branches: [ "main" ]
  
permissions:
  contents: read

env:
    #DATABRICKS_HOST: ${{secrets.DB_DEV_HOST}}
    #DATABRICKS_TOKEN: ${{secrets.DB_DEV_PAT}} 
    TF_VAR_databricks_host: ${{ secrets.DB_QA_HOST }}
    TF_VAR_databricks_token: ${{ secrets.DB_QA_PAT }}

jobs:  
  build-and-test:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    environment: staging

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./Terraform
     
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout repository
      uses: actions/checkout@v3    
      
    - name: Prepare Terraform
      uses: hashicorp/setup-terraform@v1
      with :
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Init Terraform
      run: terraform init
    
    
    - name: Databricks CLI config
      run: |
          pip install databricks-cli 
          cat > ~/.databrickscfg << EOF 
          [DEFAULT] 
          host = ${{ secrets.DB_QA_HOST }} 
          token = ${{ secrets.DB_QA_PAT }} 
          jobs-api-version = 2.1 
          EOF 
          
    
    - name: Plan Terraform
      id: plan
      run: | 
        terraform plan -input=false 
      
      env:                  
          TF_VAR_databricks_host: ${{ secrets.DB_QA_HOST }}
          TF_VAR_databricks_token: ${{ secrets.DB_QA_PAT }}
     
    - name: Apply Terraform
      id: apply      
      run: terraform apply -auto-approve 

      env:                  
          TF_VAR_databricks_host: ${{ secrets.DB_QA_HOST }}
          TF_VAR_databricks_token: ${{ secrets.DB_QA_PAT }}

          
      




       




    
         
      
      
      
      
